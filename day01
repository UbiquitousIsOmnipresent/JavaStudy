import java.util.Scanner;

public class ArrayQueueTest {
    public static void main(String[] args) {
        ArrayQueue queue = new ArrayQueue(4);//队列有效数据最大为3
        boolean loop = true;
        Scanner sc = new Scanner(System.in);
        char key = ' ';
        while (loop){
            System.out.println("a: 增加队列");
            System.out.println("s: 显示队列");
            System.out.println("g: 获取队列");
            System.out.println("e: 退出程序");
            System.out.println("h: 获取头数据");
            System.out.println("请输入字符：");
            key = sc.next().charAt(0);//接收一个字符
            switch (key){
                case 'a':
                    int x = sc.nextInt();
                    queue.addQueue(x);
                    break;
                case 's':
                    queue.showQueue();
                    break;
                case 'g':
                    try {
                        int queue1 = queue.getQueue();
                        System.out.println("取出的数据是："+queue1);
                    }
                    catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'e':
                    loop = false;
                    sc.close();
                    break;
                case 'h':
                    try {
                        int head = queue.getHead();
                        System.out.println("头数据是："+head);
                    }catch(Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                default:
                    System.out.println("请显示正确数据");
            }

        }
    }

}
class ArrayQueue{
    private int maxSize;
    private int rear;
    private int front;
    private int[] arr;

    public ArrayQueue(int maxSize){
        this.maxSize = maxSize;
        arr = new int[maxSize];
    }

    public boolean isFull(){
        return (rear+1)%maxSize == front;
    }

    public boolean isEmpty(){
        return rear == front;
    }

    public void addQueue(int n){
        if (isFull()){
            System.out.println("满了，不能添加");
            return;
        }
        else{
            arr[rear] = n;
            rear = (rear + 1) % maxSize;
        }
    }
    public int getQueue(){
        if(isEmpty()){
            throw new RuntimeException("空的");
        }
        else{
            int temp = arr[front];
            front = (front + 1) % maxSize;
            return temp;
        }
    }
    public void showQueue(){
        if (isEmpty()){
            System.out.println("队列为空");
            return;
        }
        for (int i = front; i < front+size(); i++) {
            System.out.printf("arr[%d]=%d\n",i%maxSize,arr[i%maxSize]);
        }

    }
    public int size(){
        return (rear+maxSize-front) % maxSize;
    }
    public int getHead(){
        if (isEmpty()){
            throw new RuntimeException("队列为空");
        }
        return arr[front];
    }

}
